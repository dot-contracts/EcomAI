// <auto-generated />
using System;
using EcomVideoAI.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EcomVideoAI.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.EmailVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_email_verification_tokens");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_email_verification_tokens_expires_at");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_email_verification_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_email_verification_tokens_user_id");

                    b.ToTable("email_verification_tokens", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.NotificationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("email_enabled");

                    b.Property<bool>("MarketingUpdates")
                        .HasColumnType("boolean")
                        .HasColumnName("marketing_updates");

                    b.Property<bool>("NewFeatures")
                        .HasColumnType("boolean")
                        .HasColumnName("new_features");

                    b.Property<bool>("PaymentFailed")
                        .HasColumnType("boolean")
                        .HasColumnName("payment_failed");

                    b.Property<bool>("PushEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("push_enabled");

                    b.Property<bool>("SmsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("sms_enabled");

                    b.Property<bool>("SubscriptionExpired")
                        .HasColumnType("boolean")
                        .HasColumnName("subscription_expired");

                    b.Property<bool>("SubscriptionRenewal")
                        .HasColumnType("boolean")
                        .HasColumnName("subscription_renewal");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.Property<bool>("VideoCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("video_completed");

                    b.Property<bool>("VideoFailed")
                        .HasColumnType("boolean")
                        .HasColumnName("video_failed");

                    b.Property<bool>("WeeklyDigest")
                        .HasColumnType("boolean")
                        .HasColumnName("weekly_digest");

                    b.HasKey("Id")
                        .HasName("pk_notification_settings");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_settings_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_notification_settings_user_id1");

                    b.ToTable("notification_settings", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_product_categories");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_product_categories_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_product_categories_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_product_categories_parent_id");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Availability")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("availability");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percent");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("domain");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("error_message");

                    b.Property<string>("MainImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("main_image_url");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("original_price");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("original_url");

                    b.Property<string>("Platform")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("platform");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("rating");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer")
                        .HasColumnName("review_count");

                    b.Property<DateTime?>("ScrapedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scraped_at");

                    b.Property<string>("ScrapingStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("scraping_status");

                    b.Property<string>("Sku")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_product_data");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_product_data_category_id");

                    b.HasIndex("OriginalUrl")
                        .HasDatabaseName("ix_product_data_original_url");

                    b.HasIndex("ScrapingStatus")
                        .HasDatabaseName("ix_product_data_scraping_status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_product_data_user_id");

                    b.ToTable("product_data", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AltText")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("ProductDataId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_data_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_product_images");

                    b.HasIndex("ProductDataId")
                        .HasDatabaseName("ix_product_images_product_data_id");

                    b.ToTable("product_images", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_refresh_tokens_expires_at");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_refresh_tokens_user_id1");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AiProviders")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("ai_providers");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("features");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("boolean")
                        .HasColumnName("is_popular");

                    b.Property<string>("MaxResolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("max_resolution");

                    b.Property<int>("MaxVideoDuration")
                        .HasColumnType("integer")
                        .HasColumnName("max_video_duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("PriceMonthly")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_monthly");

                    b.Property<decimal?>("PriceYearly")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_yearly");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<int>("TrialDays")
                        .HasColumnType("integer")
                        .HasColumnName("trial_days");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<int>("VideoCreditsMonthly")
                        .HasColumnType("integer")
                        .HasColumnName("video_credits_monthly");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plans");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_subscription_plans_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_subscription_plans_name");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("ix_subscription_plans_sort_order");

                    b.ToTable("subscription_plans", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("locale");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_until");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_users_created_at");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_users_is_active");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AutoGenerateThumbnails")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_generate_thumbnails");

                    b.Property<bool>("AutoSaveToLibrary")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_save_to_library");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date_format");

                    b.Property<string>("DefaultAspectRatio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_aspect_ratio");

                    b.Property<int>("DefaultVideoDuration")
                        .HasColumnType("integer")
                        .HasColumnName("default_video_duration");

                    b.Property<string>("DefaultVideoQuality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_video_quality");

                    b.Property<string>("DefaultVideoResolution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("default_video_resolution");

                    b.Property<bool>("EmailNotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("email_notifications_enabled");

                    b.Property<bool>("MarketingEmailsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("marketing_emails_enabled");

                    b.Property<string>("PreferredAiProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preferred_ai_provider");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preferred_language");

                    b.Property<bool>("PushNotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("push_notifications_enabled");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time_format");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.Property<bool>("WatermarkEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("watermark_enabled");

                    b.HasKey("Id")
                        .HasName("pk_user_preferences");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_preferences_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_user_preferences_user_id1");

                    b.ToTable("user_preferences", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_user_roles_user_id1");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_renew");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("billing_cycle");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_paid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("stripe_subscription_id");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_plan_id");

                    b.Property<DateTime?>("TrialEndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trial_ends_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_subscriptions");

                    b.HasIndex("EndsAt")
                        .HasDatabaseName("ix_user_subscriptions_ends_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_user_subscriptions_status");

                    b.HasIndex("StripeSubscriptionId")
                        .HasDatabaseName("ix_user_subscriptions_stripe_subscription_id");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("ix_user_subscriptions_subscription_plan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_subscriptions_user_id");

                    b.ToTable("user_subscriptions", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AspectRatio")
                        .HasColumnType("integer")
                        .HasColumnName("aspect_ratio");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error_message");

                    b.Property<long>("FileSizeBytes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("file_size_bytes");

                    b.Property<string>("FreepikImageTaskId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("freepik_image_task_id");

                    b.Property<string>("FreepikTaskId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("freepik_task_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("input_type");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid?>("ProductDataId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_data_id");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resolution");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Style")
                        .HasColumnType("text")
                        .HasColumnName("style");

                    b.Property<string>("TextPrompt")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("text_prompt");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("pk_videos");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_videos_created_at");

                    b.HasIndex("FreepikImageTaskId")
                        .IsUnique()
                        .HasDatabaseName("ix_videos_freepik_image_task_id")
                        .HasFilter("freepik_image_task_id IS NOT NULL");

                    b.HasIndex("FreepikTaskId")
                        .IsUnique()
                        .HasDatabaseName("ix_videos_freepik_task_id")
                        .HasFilter("freepik_task_id IS NOT NULL");

                    b.HasIndex("ProductDataId")
                        .HasDatabaseName("ix_videos_product_data_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_videos_status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_videos_user_id");

                    b.ToTable("videos", (string)null);
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.EmailVerificationToken", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_verification_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.NotificationSettings", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.User", null)
                        .WithOne("NotificationSettings")
                        .HasForeignKey("EcomVideoAI.Domain.Entities.NotificationSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_settings_users_user_id");

                    b.HasOne("EcomVideoAI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_settings_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_product_categories_product_categories_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductData", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_product_data_product_categories_category_id");

                    b.HasOne("EcomVideoAI.Domain.Entities.User", "User")
                        .WithMany("ProductData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_data_users_user_id");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.ProductData", "ProductData")
                        .WithMany("Images")
                        .HasForeignKey("ProductDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_images_product_data_product_data_id");

                    b.Navigation("ProductData");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.HasOne("EcomVideoAI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.UserPreferences", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.User", null)
                        .WithOne("Preferences")
                        .HasForeignKey("EcomVideoAI.Domain.Entities.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_preferences_users_user_id");

                    b.HasOne("EcomVideoAI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_preferences_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.HasOne("EcomVideoAI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.UserSubscription", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_subscription_plans_subscription_plan_id");

                    b.HasOne("EcomVideoAI.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_users_user_id");

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.Video", b =>
                {
                    b.HasOne("EcomVideoAI.Domain.Entities.ProductData", null)
                        .WithMany("Videos")
                        .HasForeignKey("ProductDataId")
                        .HasConstraintName("fk_videos_product_data_product_data_id");

                    b.HasOne("EcomVideoAI.Domain.Entities.User", null)
                        .WithMany("Videos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_videos_users_user_id");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.ProductData", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("EcomVideoAI.Domain.Entities.User", b =>
                {
                    b.Navigation("NotificationSettings");

                    b.Navigation("Preferences");

                    b.Navigation("ProductData");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");

                    b.Navigation("Subscriptions");

                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
